// Project detail page functionality
// Generated by Website Manager with enhanced relationship support

const projectsData = {
  "custom-battery-management-system-edexbms": {
    "id": "custom-battery-management-system-edexbms",
    "title": "Custom battery management system (EDEXBMS)",
    "description": "Custom designed lithium ion battery management system still under works has multiple different revisions.",
    "status": "in-progress",
    "category": "BMS",
    "tags": [
      "EDEXBMS",
      "battery management system",
      "BMS",
      "PCB"
    ],
    "coverImage": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316392_y.jpg",
    "readingTime": 5,
    "images": [
      "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316392_y.jpg"
    ],
    "startDate": "2023-02-21",
    "completedDate": "",
    "parentProject": "",
    "subprojects": [],
    "details": "dfgsdfgdd\n\n[resistor-based-passive-balancer]",
    "technologies": [
      "f"
    ],
    "challenges": [
      "f"
    ],
    "outcomes": [
      "f"
    ],
    "technologiesTitle": "Technologies",
    "challengesTitle": "Key Challenges",
    "outcomesTitle": "Outcomes"
  }
};
const galleryData = {
  "resistor-based-passive-balancer": {
    "id": "resistor-based-passive-balancer",
    "title": "Resistor based passive balancer",
    "description": "resistor based passive balancer first ever design prototype for EDEXBMS",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/IMG_3178.JPEG",
    "tags": [
      "BMS",
      "EDEXBMS",
      "battery management system",
      "passive balancer",
      "balancing"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "differential-voltage-measurement-prototype": {
    "id": "differential-voltage-measurement-prototype",
    "title": "differential voltage measurement prototype",
    "description": "first prototype of differential measurement using resistors. ",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/IMG_3294.JPEG",
    "tags": [
      "differential voltage measurement",
      "prototype",
      "BMS"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "differential-voltage-measurement-prototype-2": {
    "id": "differential-voltage-measurement-prototype-2",
    "title": "differential voltage measurement prototype 2",
    "description": "-",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/IMG_3678.JPG",
    "tags": [
      "differential voltage measurement",
      "prototype",
      "BMS"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "differential-voltage-measurement-prototype-test": {
    "id": "differential-voltage-measurement-prototype-test",
    "title": "differential voltage measurement prototype test",
    "description": "testing the setup using esp32 via i2c",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/IMG_3209.JPEG",
    "tags": [
      "prototype",
      "BMS",
      "differential voltage measurement",
      "i2c"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-prototype-v4-front": {
    "id": "edex-bms-prototype-v4-front",
    "title": "EDEX bms prototype v4 front",
    "description": "4th iteration of the EDEXBMS battery management system front",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316392_y.jpg",
    "tags": [
      "EDEXBMS",
      "bms",
      "battery management system"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v4-assembly-verification": {
    "id": "edex-bms-v4-assembly-verification",
    "title": "EDEX bms v4 assembly verification",
    "description": "checking for proper soldering of the stm32 pins.",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316397_y.jpg",
    "tags": [
      "STM32",
      "PCB",
      "BMS"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v4-programming-setup": {
    "id": "edex-bms-v4-programming-setup",
    "title": "EDEX bms v4 programming setup",
    "description": "setting up the bms for programming using a stlink and usb to ttl converter uart for debugging",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316385_y.jpg",
    "tags": [
      "STM32",
      "Stlink",
      "programming",
      "BMS"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v4-smd-assembly": {
    "id": "edex-bms-v4-smd-assembly",
    "title": "EDEX bms v4 SMD assembly ",
    "description": "fully assembled edex bms with all smd components soldered",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316409_y.jpg",
    "tags": [
      "BMS",
      "PCB",
      "SMD",
      "Soldering"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v4-stencil-and-pcb": {
    "id": "edex-bms-v4-stencil-and-pcb",
    "title": "EDEX bms v4 stencil and pcb ",
    "description": "solder paste stencil and pcb directly from the manufacture right before I soldered everything.",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316382_y.jpg",
    "tags": [
      "BMS",
      "PCB",
      "soldering"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v4-components-pick-and-place-diagram": {
    "id": "edex-bms-v4-components-pick-and-place-diagram",
    "title": "EDEX bms v4 components pick and place diagram",
    "description": "diagram for picking and placing components onto the pcb on my monitor for easy assembly",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316402_y.jpg",
    "tags": [
      "pick and place",
      "soldering",
      "pcb",
      "bms"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "stm32l-low-power-mcu-for-edex-bms-v4": {
    "id": "stm32l-low-power-mcu-for-edex-bms-v4",
    "title": "STM32L low power mcu for EDEX bms v4",
    "description": "some stm32 low power mcu for the new edexbms v4 series. ",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316403_y.jpg",
    "tags": [
      "stm32",
      "stm32l"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v4-pcb": {
    "id": "edex-bms-v4-pcb",
    "title": "EDEX bms v4 pcb ",
    "description": "custom designed v4 pcb for edexbms. ",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/Screenshot%202025-07-14%20214424.png",
    "tags": [
      "easyeda",
      "pcb",
      "bms"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v4-upper-aluminium-pcb": {
    "id": "edex-bms-v4-upper-aluminium-pcb",
    "title": "EDEX bms v4 upper aluminium pcb ",
    "description": "upper layer of pcb made from aluminium for cooling of the mosfets.",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/Screenshot%202025-07-14%20214431.png",
    "tags": [
      "pcb",
      "easyeda",
      "bms"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-power-stage-pcb-design": {
    "id": "edex-bms-v3-power-stage-pcb-design",
    "title": "EDEX bms v3 power stage pcb design",
    "description": "edexbms v3 power stage pcb layer this houses the mosfets and power components of the bms ",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/IMG_1226.JPEG",
    "tags": [
      "bms",
      "pcb",
      "easyeda"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-logic-pcb-design": {
    "id": "edex-bms-v3-logic-pcb-design",
    "title": "EDEX bms v3 logic pcb design",
    "description": "this is the logic pcb for edexbms this houses the mcu and balancing",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/IMG_1225.JPEG",
    "tags": [
      "bms",
      "pcb",
      "easyeda"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-front": {
    "id": "edex-bms-v3-front",
    "title": "EDEX bms v3 front",
    "description": "fully assembled edexbms v3 front ",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316398_y.jpg",
    "tags": [
      "bms",
      "edexbms",
      "battery management system"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-side": {
    "id": "edex-bms-v3-side",
    "title": "EDEX bms v3 side",
    "description": "edexbms assembled side note that the top layer is made from aluminium for cooling ",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316391_y.jpg",
    "tags": [
      "bms",
      "edexbms",
      "battery management system"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v4-parts": {
    "id": "edex-bms-v4-parts",
    "title": "EDEX bms v4 parts",
    "description": "edexbms v4 parts for assembly bought from lcsc ",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316390_y.jpg",
    "tags": [
      "components",
      "lcsc",
      "bms"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-thermal-pads-for-cooling-balancing-resistors": {
    "id": "edex-bms-v3-thermal-pads-for-cooling-balancing-resistors",
    "title": "EDEX bms v3 thermal pads for cooling balancing resistors",
    "description": "thermal pads to transfer heat from the balancing resistors to the outer aluminium layer ",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316400_y.jpg",
    "tags": [
      "cooling",
      "bms",
      "thermal pads"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-programming-setup": {
    "id": "edex-bms-v3-programming-setup",
    "title": "EDEX bms v3 programming setup ",
    "description": "programming setup using stlink and also usb to ttl converter not shown in this photo",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/IMG_1331.JPEG",
    "tags": [
      "programming",
      "stlink",
      "bms"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-assembled-power-stage-pcb": {
    "id": "edex-bms-v3-assembled-power-stage-pcb",
    "title": "EDEX bms v3 assembled power stage pcb",
    "description": "powerstage pcb assembled fully",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316407_y.jpg",
    "tags": [
      "PCB",
      "soldering",
      "bms"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-logic-board-assembly": {
    "id": "edex-bms-v3-logic-board-assembly",
    "title": "EDEX bms v3 logic board assembly",
    "description": "partially assembled logic board for edexbms v3",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316410_y.jpg",
    "tags": [
      "soldering",
      "pcb",
      "bms"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-power-stage-board-reflow-oven-cooking": {
    "id": "edex-bms-v3-power-stage-board-reflow-oven-cooking",
    "title": "EDEX bms v3 power stage board reflow oven cooking",
    "description": "cooking the pcb in the reflow oven for optimal mosfet soldering onto the pcb. ",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316394_y.jpg",
    "tags": [
      "bms",
      "pcb",
      "soldering",
      "reflow",
      "solder paste"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-power-stage-pcb-close-up": {
    "id": "edex-bms-v3-power-stage-pcb-close-up",
    "title": "EDEX bms v3 power stage pcb close up ",
    "description": "close up of mosfets reflowed in the reflow oven ",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316383_y.jpg",
    "tags": [
      "bms",
      "soldering",
      "mosfet",
      "reflow oven"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-top-aluminium-pcb": {
    "id": "edex-bms-v3-top-aluminium-pcb",
    "title": "EDEX bms v3 top aluminium pcb ",
    "description": "top aluminum pcb design in easyeda ",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/Screenshot%202025-07-14%20214147.png",
    "tags": [
      "pcb",
      "easyeda",
      "bms"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-logic-pcb": {
    "id": "edex-bms-v3-logic-pcb",
    "title": "EDEX bms v3 logic pcb ",
    "description": "logic pcb made in easyeda",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/Screenshot%202025-07-14%20214208.png",
    "tags": [
      "bms",
      "pcb",
      "easyeda"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-power-stage-pcb": {
    "id": "edex-bms-v3-power-stage-pcb",
    "title": "EDEX bms v3 power stage pcb",
    "description": "power stage pcb made in easyeda",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/Screenshot%202025-07-14%20214231.png",
    "tags": [
      "pcb",
      "easyeda",
      "bms"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-bodge-fix": {
    "id": "edex-bms-v3-bodge-fix",
    "title": "EDEX bms v3 bodge fix ",
    "description": "power supply mosfet was of a too small package size so it was bodged in order for it to stop overheating. ",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316389_y.jpg",
    "tags": [
      "bms",
      "soldering",
      "bodge"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-bodge-fix-closer-look": {
    "id": "edex-bms-v3-bodge-fix-closer-look",
    "title": "EDEX bms v3 bodge fix closer look ",
    "description": "zoomed in ",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316401_y.jpg",
    "tags": [
      "bms",
      "soldering",
      "bodge"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  },
  "edex-bms-v3-custom-protocol-sniffing": {
    "id": "edex-bms-v3-custom-protocol-sniffing",
    "title": "EDEX bms v3 custom protocol sniffing",
    "description": "used a raspberry pi pico as a logic analyser to sniff my custom made protocol",
    "url": "https://raw.githubusercontent.com/rasil1127/syedrasil/refs/heads/main/images/photo_6028142215647316384_y.jpg",
    "tags": [
      "logic analyser",
      "protocol sniffing",
      "bms",
      "programming"
    ],
    "category": "BMS",
    "projectId": "",
    "uploadDate": "2025-07-15"
  }
};

document.addEventListener("DOMContentLoaded", function () {
  // Get project ID from URL parameters
  const urlParams = new URLSearchParams(window.location.search);
  const projectId = urlParams.get("id");

  if (!projectId || !projectsData[projectId]) {
    // Redirect to projects page if invalid ID
    window.location.href = "projects.html";
    return;
  }

  const project = projectsData[projectId];

  // Populate page content
  populateProjectDetail(project);
});

function populateProjectDetail(project) {
  // Update page title
  document.title = `${project.title || 'Project'} - ${project.category || 'Project'}`;

  // Update breadcrumb
  const breadcrumb = document.getElementById("project-breadcrumb");
  if (breadcrumb) breadcrumb.textContent = project.title || "Project";

  // Update header content
  const cover = document.getElementById("project-cover");
  if (cover) {
    cover.src = project.coverImage || "";
    cover.alt = project.title || "";
  }
  
  const title = document.getElementById("project-title");
  if (title) title.textContent = project.title || "";
  
  const description = document.getElementById("project-description");
  if (description) description.textContent = project.description || "";

  // Update status with appropriate badge class and icon
  const statusElement = document.getElementById("project-status");
  if (statusElement) {
    statusElement.innerHTML = getStatusIcon(project.status) + (project.status || "").replace("-", " ").toUpperCase();
    statusElement.className = `badge badge-${getStatusClass(project.status)}`;
  }

  // Update category
  const category = document.getElementById("project-category");
  if (category) category.textContent = project.category || "";

  // Update dates
  const startDate = document.getElementById("project-start-date");
  if (startDate) startDate.textContent = formatDate(project.startDate);

  if (project.completedDate) {
    const completedContainer = document.getElementById("completed-date-container");
    if (completedContainer) completedContainer.style.display = "block";
    
    const completedDate = document.getElementById("project-completed-date");
    if (completedDate) completedDate.textContent = formatDate(project.completedDate);
  }

  // Update reading time
  const readingTime = document.getElementById("project-reading-time");
  if (readingTime) readingTime.textContent = `${project.readingTime || 5} min read`;

  // Update tags
  const tagsContainer = document.getElementById("project-tags");
  if (tagsContainer) {
    tagsContainer.innerHTML = "";
    (project.tags || []).forEach((tag) => {
      const tagElement = document.createElement("span");
      tagElement.className = "tag";
      tagElement.textContent = `#${tag}`;
      tagsContainer.appendChild(tagElement);
    });
  }

  // Update main content - convert markdown-like content to HTML and inject images
  const detailsContainer = document.getElementById("project-details");
  if (detailsContainer) {
    detailsContainer.innerHTML = convertMarkdownToHTMLWithImages(project.details, project.images);
  }

  // Update sidebar lists with custom titles
  updateSidebarList("project-technologies", project.technologies, project.technologiesTitle);
  updateSidebarList("project-challenges", project.challenges, project.challengesTitle);
  updateSidebarList("project-outcomes", project.outcomes, project.outcomesTitle);

    // Show related projects if they exist
  if (project.subprojects || project.parentProject) {
    showRelatedProjects(project);
  }

  // Show associated images section at bottom
  showAssociatedImages(project);
}

function getStatusClass(status) {
  switch (status) {
    case "completed": return "success";
    case "in-progress": return "accent";
    case "planning": return "warning";
    case "paused": return "muted";
    case "cancelled": return "danger";
    default: return "muted";
  }
}

function getStatusIcon(status) {
  switch (status) {
    case "completed":
      return '<svg class="badge-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
    case "in-progress":
      return '<svg class="badge-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
    case "planning":
      return '<svg class="badge-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
    case "paused":
      return '<svg class="badge-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
    case "cancelled":
      return '<svg class="badge-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
    default:
      return '<svg class="badge-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
  }
}

function formatDate(dateString) {
  if (!dateString) return '';
  const date = new Date(dateString);
  return date.toLocaleDateString("en-US", { year: "numeric", month: "long", day: "numeric" });
}

function updateSidebarList(containerId, items, customTitle) {
  const container = document.getElementById(containerId);
  if (container) {
    // Update the title if provided
    if (customTitle) {
      const titleElement = container.previousElementSibling;
      if (titleElement && titleElement.tagName === 'H3') {
        titleElement.textContent = customTitle;
      }
    }
    
    container.innerHTML = "";
    (items || []).forEach((item) => {
      const li = document.createElement("li");
      li.textContent = item;
      container.appendChild(li);
    });
  }
}

function convertMarkdownToHTML(markdown) {
  if (!markdown) return '';
  
  // Enhanced markdown-to-HTML conversion with proper bold formatting
  let html = markdown
    .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")  // Fix bold formatting
    .replace(/\*(.*?)\*/g, "<em>$1</em>")  // Italic formatting
    .replace(/^# (.*$)/gm, "<h1>$1</h1>")
    .replace(/^## (.*$)/gm, "<h2>$1</h2>")
    .replace(/^### (.*$)/gm, "<h3>$1</h3>")
    .replace(/^- (.*$)/gm, "<li>$1</li>")
    .replace(/^\d+\. (.*$)/gm, "<li>$1</li>")
    .replace(/\n\n/g, "</p><p>")
    .replace(/^\s*$/gm, "");

  // Wrap paragraphs
  html = "<p>" + html + "</p>";

  // Fix list formatting
  html = html.replace(/(<li>.*<\/li>)/gs, "<ul>$1</ul>");
  html = html.replace(/<\/ul>\s*<ul>/g, "");

  // Clean up empty paragraphs
  html = html.replace(/<p>\s*<\/p>/g, "");
  html = html.replace(/<p>\s*(<h[1-6]>)/g, "$1");
  html = html.replace(/(<\/h[1-6]>)\s*<\/p>/g, "$1");
  html = html.replace(/<p>\s*(<ul>)/g, "$1");
  html = html.replace(/(<\/ul>)\s*<\/p>/g, "$1");

  return html;
}

function convertMarkdownToHTMLWithImages(markdown, images) {
  let html = convertMarkdownToHTML(markdown);

  // If we have multiple images, inject them into the content
  if (images && images.length > 1) {
    // Find major section breaks (h2 elements) and inject images
    const sections = html.split(/(<h2>.*?<\/h2>)/);
    let imageIndex = 1; // Skip first image (cover image)

    let result = "";
    for (let i = 0; i < sections.length; i++) {
      result += sections[i];

      // After every 2nd section, add an image if available
      if (i > 0 && i % 4 === 0 && imageIndex < images.length) {
        result += `
          <div style="margin: 2rem 0; text-align: center; border: 1px solid var(--border); border-radius: var(--radius); overflow: hidden; background-color: var(--card);">
            <img src="${images[imageIndex]}" alt="Project Image ${imageIndex + 1}" style="width: 100%; height: auto; max-height: 400px; object-fit: cover;" />
            <div style="padding: 1rem; font-size: 0.875rem; color: var(--muted-foreground); text-align: center;">
              Project progress and detailed view
            </div>
          </div>
        `;
        imageIndex++;
      }
    }

    return result;
  }

  return html;
}

function showRelatedProjects(project) {
  const relatedSection = document.getElementById("related-projects-section");
  const relatedContainer = document.getElementById("related-projects");

  if (!relatedSection || !relatedContainer) return;

  // Only show if there are actually related projects
  let hasRelated = false;

  // Show parent project if it exists
  if (project.parentProject && projectsData[project.parentProject]) {
    hasRelated = true;
  }

  // Show subprojects if they exist
  if (project.subprojects && project.subprojects.length > 0) {
    hasRelated = true;
  }

  if (!hasRelated) return;

  relatedSection.style.display = "block";
  relatedContainer.innerHTML = "";

  // Add section for parent project
  if (project.parentProject && projectsData[project.parentProject]) {
    const parentProject = projectsData[project.parentProject];

    const parentSection = document.createElement("div");
    parentSection.innerHTML = `
            <h4 style="font-size: 0.875rem; font-weight: 600; color: var(--foreground); margin-bottom: 0.5rem;">Parent Project</h4>
        `;
    relatedContainer.appendChild(parentSection);

    addRelatedProject(relatedContainer, parentProject);
  }

  // Add section for subprojects
  if (project.subprojects && project.subprojects.length > 0) {
    const subprojectsSection = document.createElement("div");
    subprojectsSection.innerHTML = `
            <h4 style="font-size: 0.875rem; font-weight: 600; color: var(--foreground); margin-bottom: 0.5rem; margin-top: 1.5rem;">Required Infrastructure</h4>
        `;
    relatedContainer.appendChild(subprojectsSection);

    project.subprojects.forEach((subprojectId) => {
      if (projectsData[subprojectId]) {
        const subproject = projectsData[subprojectId];
        addRelatedProject(relatedContainer, subproject);
      }
    });
  }
}

function addRelatedProject(container, project) {
  const projectElement = document.createElement("a");
  projectElement.href = `project-detail.html?id=${project.id}`;
  projectElement.className = "related-project-item";

  // Get status icon
  let statusIcon = "";
  let statusClass = "";
  switch (project.status) {
    case "completed":
      statusIcon = '<svg class="badge-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
      statusClass = "badge-success";
      break;
    case "in-progress":
      statusIcon = '<svg class="badge-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
      statusClass = "badge-accent";
      break;
    case "cancelled":
      statusIcon = '<svg class="badge-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>';
      statusClass = "badge-danger";
      break;
    default:
      statusIcon = '<svg class="badge-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
      statusClass = "badge-muted";
  }

  projectElement.innerHTML = `
        <div class="related-project-title">${project.title || ''}</div>
        <div class="related-project-description">${project.description || ''}</div>
        <div style="margin-top: 0.75rem;">
            <span class="badge ${statusClass}" style="font-size: 0.625rem; padding: 0.125rem 0.375rem;">
                ${statusIcon}${(project.status || '').replace("-", " ").toUpperCase()}
            </span>
        </div>
    `;

    container.appendChild(projectElement);
}

function showAssociatedImages(project) {
  // Find images associated with this project
  const associatedImages = Object.values(galleryData).filter(img => img.projectId === project.id);

  if (associatedImages.length === 0) return;

  // Find or create associated images section
  let imagesSection = document.getElementById("associated-images-section");
  if (!imagesSection) {
    // Create the section at the end of the main content
    const mainContent = document.querySelector(".main") || document.querySelector("main") || document.body;
    imagesSection = document.createElement("section");
    imagesSection.id = "associated-images-section";
        imagesSection.style.cssText = "margin: 3rem 0; padding: 2rem; background: rgba(22, 27, 34, 0.8); border: 1px solid rgba(48, 54, 61, 0.6); border-radius: 8px;";
    mainContent.appendChild(imagesSection);
  }

    imagesSection.innerHTML = `
    <h2 style="margin-bottom: 1.5rem; color: #f8fafb;">Project Images (${associatedImages.length})</h2>
    <div class="associated-images-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1.5rem;">
      ${associatedImages.map(image => `
                <div class="associated-image-item" style="background: rgba(24, 27, 32, 0.8); border: 1px solid rgba(44, 49, 58, 0.8); border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.3);">
          <img src="${image.url}" alt="${image.title}" style="width: 100%; height: 200px; object-fit: cover;" />
          <div style="padding: 1rem;">
            <h3 style="margin: 0 0 0.5rem 0; font-size: 1.1rem; color: #f8fafb;">${image.title}</h3>
            <p style="margin: 0; color: #8b949e; font-size: 0.9rem;">${image.description || ''}</p>
            ${image.tags && image.tags.length > 0 ? `
              <div style="margin-top: 0.75rem;">
                ${image.tags.map(tag => `<span style="display: inline-block; background: #e3f2fd; color: #1976d2; padding: 0.25rem 0.5rem; border-radius: 12px; font-size: 0.75rem; margin: 0.125rem;">#${tag}</span>`).join('')}
              </div>
            ` : ''}
          </div>
        </div>
      `).join('')}
    </div>
  `;
}

// Enhanced convertMarkdownToHTML with image insertion support
function convertMarkdownToHTML(markdown) {
  if (!markdown) return '';

  // Process image insertions first
  function processImageInsertions(text) {
    return text.replace(/\[([^\]]+)\]/g, (match, imageName) => {
      // Find image by title (case insensitive) or by exact ID
      const image = Object.values(galleryData).find(img => {
        if (!img) return false;
        // Match by title (case insensitive)
        if (img.title && img.title.toLowerCase() === imageName.toLowerCase()) return true;
        // Match by ID
        if (img.id === imageName) return true;
        // Match by URL filename
        if (img.url && img.url.includes(imageName)) return true;
        return false;
      });

      if (image) {
        return `<div class="inserted-image-container" style="margin: 20px 0; text-align: center;"><img src="${image.url}" alt="${image.title || imageName}" class="inserted-image" style="max-width: 100%; height: auto; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);" /><p style="font-size: 14px; color: #666; margin-top: 8px; font-style: italic;">${image.title || imageName}</p></div>`;
      }

      // Return original if not found
      return match;
    });
  }

  // Process image insertions first
  markdown = processImageInsertions(markdown);

  // Enhanced markdown-to-HTML conversion with proper bold formatting
  let html = markdown
    .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")  // Fix bold formatting
    .replace(/\*(.*?)\*/g, "<em>$1</em>")  // Italic formatting
    .replace(/^# (.*$)/gm, "<h1>$1</h1>")
    .replace(/^## (.*$)/gm, "<h2>$1</h2>")
    .replace(/^### (.*$)/gm, "<h3>$1</h3>")
    .replace(/^- (.*$)/gm, "<li>$1</li>")
    .replace(/^\d+\. (.*$)/gm, "<li>$1</li>")
    .replace(/\n\n/g, "</p><p>")
    .replace(/^\s*$/gm, "");

  // Wrap paragraphs
  html = "<p>" + html + "</p>";

  // Fix list formatting
  html = html.replace(/(<li>.*<\/li>)/gs, "<ul>$1</ul>");
  html = html.replace(/<\/ul>\s*<ul>/g, "");

  // Clean up empty paragraphs
  html = html.replace(/<p>\s*<\/p>/g, "");
  html = html.replace(/<p>\s*(<h[1-6]>)/g, "$1");
  html = html.replace(/(<\/h[1-6]>)\s*<\/p>/g, "$1");
  html = html.replace(/<p>\s*(<ul>)/g, "$1");
  html = html.replace(/(<\/ul>)\s*<\/p>/g, "$1");

  return html;
}

console.log("Project detail page functionality loaded");